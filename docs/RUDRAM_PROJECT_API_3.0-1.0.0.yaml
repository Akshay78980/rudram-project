openapi: 3.0.0
info:
  title: Rudram API
  description: An API to manage CRUD operations for UserProfile and Post models.
  contact:
    name: Akshay
    email: p.akshaysugathan@gmail.com
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/PAKSHAYSUGATHAN/RUDRAM_PROJECT_API_3.0/1.0.0
  description: SwaggerHub API Auto Mocking
- url: http://127.0.0.1:8000/api/
  description: local development server
tags:
- name: UserProfile
  description: Endpoints related to user profiles.
- name: Post
  description: Endpoints related to posts.
paths:
  /api/profiles:
    get:
      tags:
      - UserProfile
      summary: Retrieve a list of profiles
      parameters:
      - name: page
        in: query
        description: The page number of results to fetch.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 1
      - name: page_size
        in: query
        description: The number of results per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 20
          minimum: 1
          type: integer
          example: 10
          default: 5
      - name: search
        in: query
        description: Search profiles by name
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: Akshay
      - name: ordering
        in: query
        description: Order profiles by name(ascending or descending)
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - name
          - -name
      responses:
        "200":
          description: A paginated list of profiles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileList'
              example:
                example-1:
                  value:
                    count: 10
                    next: http://127.0.0.1:8000/api/profiles?page=2
                    results:
                    - id: 1
                      name: Benyamin
                      email: benyamin@gmail.com
                    - id: 2
                      name: Joseph
                      email: joseph@gmail.com
                    - id: 3
                      name: Joshy
                      email: joshy@gmail.com
    post:
      tags:
      - UserProfile
      summary: Create a new profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        "201":
          description: Created profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/profiles/{id}:
    get:
      tags:
      - UserProfile
      summary: Retrieve a specific profile
      parameters:
      - name: id
        in: path
        description: The ID of the profile to retrieve.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: The requested profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
              example:
                id: 1
                name: Benyamin
                email: benyamin@gmail.com
        "404":
          description: Profile not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
    put:
      tags:
      - UserProfile
      summary: Update an existing profile
      parameters:
      - name: id
        in: path
        description: The ID of the profile to update.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        "200":
          description: The updated profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        "404":
          description: Profile not found.
    delete:
      tags:
      - UserProfile
      summary: Delete a profile
      parameters:
      - name: id
        in: path
        description: The ID of the profile to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: Profile deleted successfully.
        "404":
          description: Profile not found.
    patch:
      tags:
      - UserProfile
      summary: Partially update an existing profile
      parameters:
      - name: id
        in: path
        description: The ID of the profile to update.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
            example:
              name: Updated Name
      responses:
        "200":
          description: Partially updated profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        "404":
          description: Profile not found
  /api/posts/:
    get:
      tags:
      - Post
      summary: Retrieve a list of posts
      parameters:
      - name: ordering
        in: query
        description: Order posts by creation or comment date.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - created_at
          - -created_at
          - commented_date
          - -commented_date
      - name: title
        in: query
        description: Filter posts by title (including null titles).
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: None
      responses:
        "200":
          description: A successful response containing a list of posts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
              example:
              - id: 1
                title: First Post
                author: 1
                created_at: 2024-11-29T10:00:00Z
                comments: []
                comment_count: 0
              - id: 2
                author: 2
                created_at: 2024-11-28T14:30:00Z
                comments:
                - id: 1
                  comment: Nice post!
                  publication_date: 2024-11-29T11:00:00Z
                comment_count: 1
    post:
      tags:
      - Post
      summary: Create a new post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api_posts_body'
            example:
              author: 5
              title: My first post
      responses:
        "201":
          description: Created post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
              example:
                id: 1
                title: My first post
                author: 5
                created_at: 2024-11-29T10:00:00Z
                comments: []
                comment_count: 0
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              example:
                author:
                - This field is required.
  /api/posts/{id}/:
    get:
      tags:
      - Post
      summary: Retrieve a specific post
      parameters:
      - name: id
        in: path
        description: ID of the post to retrieve.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: The requested post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        "404":
          description: Post not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_1'
    delete:
      tags:
      - Post
      summary: Delete a post
      parameters:
      - name: id
        in: path
        description: ID of the post to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: Post deleted successfully.
        "400":
          description: Cannot delete a post with comments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: Post not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_1'
components:
  schemas:
    ValidationError:
      type: object
      properties:
        field_name:
          type: array
          example:
          - This field is required.
          items:
            type: string
    Profile:
      required:
      - email
      - id
      - name
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          description: Unique identifier of each profile.
        name:
          type: string
          description: Fullname of the user
        email:
          type: string
          description: Email address of user
          format: email
        profile_picture:
          type: string
          description: The url of the profile picture
          nullable: true
    ProfileList:
      type: object
      properties:
        count:
          type: integer
          description: Total number of user profile records in the database.
        next:
          type: string
          description: The url of next page of results(if any)
          nullable: true
        previous:
          type: string
          description: The url of the previous page of results(if any)
          nullable: true
        results:
          type: array
          description: Array of user profile objects
          items:
            $ref: '#/components/schemas/Profile'
    Comment:
      required:
      - comment
      - id
      - publication_date
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the comment.
        comment:
          type: string
          description: Text content of the comment.
        publication_date:
          type: string
          description: Date and time the comment was published.
          format: date-time
    Post:
      required:
      - author
      - created_at
      - id
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the post.
        title:
          type: string
          description: Title of the post.
          nullable: true
        author:
          type: integer
          description: ID of the user who authored the post.
        created_at:
          type: string
          description: Date and time the post was created.
          format: date-time
        comments:
          type: array
          description: List of comments associated with the post.
          items:
            $ref: '#/components/schemas/Comment'
        comment_count:
          type: integer
          description: Number of comments on the post.
    inline_response_404:
      type: object
      properties:
        detail:
          type: string
          example: No UserProfile matches the given query.
    api_posts_body:
      type: object
      properties:
        title:
          type: string
          description: Title of the post.
          nullable: true
        author:
          type: integer
          description: ID of the user creating the post.
    inline_response_404_1:
      type: object
      properties:
        detail:
          type: string
          example: No Post matches the given query.
    inline_response_400:
      type: object
      properties:
        detail:
          type: string
          example: Cannot delete post with comments
  parameters:
    PageNumber:
      name: page
      in: query
      description: The page number of results to fetch.
      required: false
      style: form
      explode: true
      schema:
        type: integer
        example: 1
    PageSize:
      name: page_size
      in: query
      description: The number of results per page.
      required: false
      style: form
      explode: true
      schema:
        maximum: 20
        minimum: 1
        type: integer
        example: 10
        default: 5
